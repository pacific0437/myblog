<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jquery | Ashley's Blog]]></title>
  <link href="http://pacific0437.github.io/myblog/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://pacific0437.github.io/myblog/"/>
  <updated>2015-07-13T09:44:25+08:00</updated>
  <id>http://pacific0437.github.io/myblog/</id>
  <author>
    <name><![CDATA[Ashley Yang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JQuery API]]></title>
    <link href="http://pacific0437.github.io/myblog/blog/jquery-api/"/>
    <updated>2014-12-03T23:11:18+08:00</updated>
    <id>http://pacific0437.github.io/myblog/blog/jquery-api</id>
    <content type="html"><![CDATA[<h3>JQuery API</h3>

<h6>jQuery( &ldquo;prev + next&rdquo; )</h6>

<p>同一个父元素下紧接在 “prev” 元素后的 “next” 元素</p>

<h6>jQuery( &ldquo;prev ~ siblings&rdquo; )</h6>

<p>匹配 “prev” 元素之后的所有 兄弟元素。具有相同的父元素，并匹配过滤“siblings”选择器。</p>

<h6>jQuery( &ldquo;:eq(index)&rdquo; )</h6>

<p><strong>注意</strong> 因为 :eq() 是一个 jQuery 延伸出来的选择器，并不是的CSS规范的一部分, 使用:eq()查询不能充分利用原生DOM提供的querySelectorAll() 方法来提高性能。为了在现代浏览器上获得更佳的性能，请使用$(&ldquo;your-pure-css-selector&rdquo;).eq(index)代替。</p>

<h6>jQuery( &ldquo;:has(selector)&rdquo; )</h6>

<p>如果表达式 $(&lsquo;div:has(p)&rsquo;) 匹配一个<code>&lt;div&gt;</code>，那么应有一个<code>&lt;p&gt;</code>存在于<code>&lt;div&gt;</code>后代元素中的任何地方，不是直接的子元素也可以。它匹配的是 <code>&lt;div&gt;</code> 而不是 <code>&lt;p&gt;</code>, 对比 $(&ldquo;div p&rdquo;)</p>

<h6>jQuery( &ldquo;[attribute|=&lsquo;value&rsquo;]&rdquo; )</h6>

<p>选择指定属性值等于给定字符串或以该字符串为前缀（该字符串后跟一个连字符“-” ）的元素。</p>

<h6>jQuery( &ldquo;[attribute~=&lsquo;value&rsquo;]&rdquo; )</h6>

<p>选择指定属性用空格分隔的值中包含一个给定值的元素。</p>

<h6>jQuery( &ldquo;:nth-child(index/even/odd/equation)&rdquo; )</h6>

<p>选择他们所有父元素的第n个子元素。
用:nth-child(n)时 ，所有子元素都计算在内，不管它们是什么，并且指定的元素被选中仅匹配连接到伪类选择器。而用:eq(n)时，只有与这个伪类前面的选择相匹配的元素才会被计数（即，成为候选元素），不限于任何其他元素的孩子，而且第（n +1）个一（n是基于0）被选中。</p>

<h6>.height()</h6>

<p>返回的是数值， 只是纯粹的 height 数值，与此相对应的是 css(&lsquo;height&rsquo;) 返回带 px 的字符串，innerHeight() 返回height+padding的数值</p>

<h6>.outerHeight( [includeMargin ] )</h6>

<p>height+padding+border  or  height+padding+border+margin</p>

<h6>.offset() and .position()</h6>

<p>.offset()是获得该元素相对于documet的当前坐标，而.position()方法可以取得元素相对于父元素的偏移位置</p>

<p>选择器</p>

<p>基本
*
.class
element
<strong>#</strong>id
selector1, selectorN, &hellip;
层级
parent > child
ancestor descendant
prev + next
prev ~ siblings
基本筛选
:animated
:eq()
:even
:first
:gt()
:header
:lang()
:last
:lt()
:not()
:odd
:root
:target
内容筛选
:contains()
:empty
:has()
:parent</p>

<p>可见性筛选
:hidden
:visible
属性
[name|=&ldquo;value&rdquo;]
[name*=&ldquo;value&rdquo;]
[name~=&ldquo;value&rdquo;]
[name$=&ldquo;value&rdquo;]
[name=&ldquo;value&rdquo;]
[name!=&ldquo;value&rdquo;
[name^=&ldquo;value&rdquo;]
[name]
[name=&ldquo;value&rdquo;][name2=&ldquo;value2&rdquo;]
子元素筛选
:first-child
:first-of-type
:last-child
:last-of-type
:nth-child()
:nth-last-child()
:nth-last-of-type()
:nth-of-type()
:only-child
:only-of-type()</p>

<p>表单
:button
:checkbox
:checked
:disabled
:enabled
:focus
:file
:image
:input
:password
:radio
:reset
:selected
:submit
:text
属性 / CSS</p>

<p>属性
.attr()
.prop()
.removeAttr()
.removeProp()
.val()
CSS
.addClass()
.css()
jQuery.cssHooks
.hasClass()
.removeClass()
.toggleClass()
尺寸
.height()
.innerHeight()
.innerWidth()
.outerHeight()
.outerWidth()
.width()
位置
.offset()
.offsetParent()
.position()
.scrollLeft()
.scrollTop()
数据
jQuery.data()
.data()
jQuery.hasData()
jQuery.removeData()
.removeData()
操作</p>

<p>拷贝
.clone()
DOM 插入, 包裹
.wrap()
.wrapAll()
.wrapInner()
DOM 插入, 内部插入
.append()
.appendTo()
.html()
.prepend()
.prependTo()
.text()
DOM 插入, 外部插入
.after()
.before()
.insertAfter()
.insertBefore()
DOM 移除
.detach()
.empty()
.remove()
.unwrap()
DOM 替换
.replaceAll()
.replaceWith()
遍历</p>

<p>筛选
.eq()
.filter()
.first()
.has()
.is()
.last()
.map()
.not()
.slice()
各种遍历
.add()
.andSelf()
.contents()
.each()
.end()
树遍历
.addBack()
.children()
.closest()
.find()
.next()
.nextAll()
.nextUntil()
.parent()
.parents()
.parentsUntil()
.prev()
.prevAll()
.prevUntil()
.siblings()</p>

<p>重大更新！这么写实在太慢了 还是直接贴网址比较好
<a href="http://www.css88.com/jqapi-1.9/">JQUery API</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery Merge]]></title>
    <link href="http://pacific0437.github.io/myblog/blog/jquery-merge/"/>
    <updated>2014-11-28T14:03:13+08:00</updated>
    <id>http://pacific0437.github.io/myblog/blog/jquery-merge</id>
    <content type="html"><![CDATA[<pre><code>merge: function( first, second ) {
    var len = +second.length,
        j = 0,
        i = first.length;

    for ( ; j &lt; len; j++ ) {
        first[ i++ ] = second[ j ];
    }

    first.length = i;

    return first;
}
</code></pre>

<p>first 和 second 都是数组的话非常好理解，如果是 JQuery 对象其实也是可以的，因为 JQeury 对象本身也具有类似数组的特性</p>

<pre><code>var ret = jQuery.merge( this.constructor(), elems );
</code></pre>

<p>所以昨天代码pushStack中解析的这一句，实际上是构造了一个全新的 JQuery 元素然后把 elems 赋给了他的 dom 属性。
再举一个 get 和 eq 区别的例子，我们都知道 get 返回的是 dom，eq 返回的是包装过后的 jquery 元素，这个其实也是通过 pushStack 来实现的</p>

<pre><code>eq: function( i ) {
    var len = this.length,
        j = +i + ( i &lt; 0 ? len : 0 );
    //this[i] 为 dom 元素，通过 pushStack-&gt;merge包装成为了 JQuery 元素
    return this.pushStack( j &gt;= 0 &amp;&amp; j &lt; len ? [ this[j] ] : [] );

}
</code></pre>

<h4>JQuery.slice</h4>

<pre><code>slice: function() {
    return this.pushStack( slice.apply( this, arguments ) );
}
</code></pre>

<p>arguments传进去后内部调用Array.slice对 JQuery 数组做分割，将结果（一个 dom 数组）传入 pushStack 做进一步处理。最终返回分割后的 JQuery 对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JQuery Object]]></title>
    <link href="http://pacific0437.github.io/myblog/blog/jquery-object/"/>
    <updated>2014-11-25T22:34:24+08:00</updated>
    <id>http://pacific0437.github.io/myblog/blog/jquery-object</id>
    <content type="html"><![CDATA[<h5>JQuery Object</h5>

<pre><code>    init = jQuery.fn.init = function( selector, context ) {
    var match, elem;

    // HANDLE: $(""), $(null), $(undefined), $(false)
    if ( !selector ) {
        return this;
    }

    // Handle HTML strings
    if ( typeof selector === "string" ) {
        if ( selector[0] === "&lt;" &amp;&amp; selector[ selector.length - 1 ] === "&gt;" &amp;&amp; selector.length &gt;= 3 ) {
            // Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check
            match = [ null, selector, null ]; //如果是 html 标签， 直接赋值 match

        } else {
            match = rquickExpr.exec( selector ); //其他情况走正则处理，正则只找有没有&lt;tag&gt;或者 #id
        }

        // Match html or make sure no context is specified for #id
        //match代表是否匹配上了，匹配上&lt;tag&gt;放match[1]里 匹配上#id 放match[2]里
        if ( match &amp;&amp; (match[1] || !context) ) {

            // HANDLE: $(html) -&gt; $(array)
            //匹配上 tag 标签了
            if ( match[1] ) {
                context = context instanceof jQuery ? context[0] : context;

                // scripts is true for back-compat
                // Intentionally let the error be thrown if parseHTML is not present
                jQuery.merge( this, jQuery.parseHTML(
                    match[1],
                    context &amp;&amp; context.nodeType ? context.ownerDocument || context : document,
                    true
                ) );

                // HANDLE: $(html, props)
                if ( rsingleTag.test( match[1] ) &amp;&amp; jQuery.isPlainObject( context ) ) {
                    for ( match in context ) {
                        // Properties of context are called as methods if possible
                        if ( jQuery.isFunction( this[ match ] ) ) {
                            this[ match ]( context[ match ] );

                        // ...and otherwise set as attributes
                        } else {
                            this.attr( match, context[ match ] );
                        }
                    }
                }

                return this;

            // HANDLE: $(#id)
            //匹配上 id 了
            } else {
                elem = document.getElementById( match[2] );

                // Check parentNode to catch when Blackberry 4.6 returns
                // nodes that are no longer in the document #6963
                if ( elem &amp;&amp; elem.parentNode ) {
                    // Inject the element directly into the jQuery object
                    this.length = 1;
                    this[0] = elem;
                }

                this.context = document;
                this.selector = selector;
                return this;
            }

        // HANDLE: $(expr, $(...))
        //如果没匹配上 分别看看其他的情况 例如非 id 的其他选择器.css tag
        } else if ( !context || context.jquery ) {
            return ( context || rootjQuery ).find( selector );

        // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
        } else {
            return this.constructor( context ).find( selector );
        }

    // HANDLE: $(DOMElement)
    //或者就是个 dom 元素
    } else if ( selector.nodeType ) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;

    // HANDLE: $(function)
    // Shortcut for document ready
    //Jquery Ready 传参是函数啊
    } else if ( jQuery.isFunction( selector ) ) {
        return typeof rootjQuery.ready !== "undefined" ?
            rootjQuery.ready( selector ) :
            // Execute immediately if ready is not present
            selector( jQuery );
    }
    //这两句是对后面 makeArray传参的预处理，不明觉厉
    if ( selector.selector !== undefined ) {
        this.selector = selector.selector;
        this.context = selector.context;
    }
    其他一些情况 比如就传了个对象类似{a:1,b:2}
    return jQuery.makeArray( selector, this );//其实还是把传进去的对象 挂在了 JQuery 对象的0位置上
};
</code></pre>

<p>匹配上 HTML Tag String 之后详细的处理没看，下次再说吧。</p>
]]></content>
  </entry>
  
</feed>
